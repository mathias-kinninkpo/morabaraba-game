from morabaraba.morabaraba_player import MorabarabaPlayer
from morabaraba.morabaraba_action import MorabarabaAction
from morabaraba.morabaraba_action import MorabarabaActionType
from morabaraba.morabaraba_rules import MorabarabaRules
from core import Color


class AI(MorabarabaPlayer):
    name = "Charlot"

    def __init__(self, color):  
        super(AI, self).__init__(color)
        self.position = color.value

    def play(self, state, remain_time): 
        rules=MorabarabaRules(self.position)
        board=state.get_board()
        actions=rules.get_player_actions(state,self.position)
        if actions[0].get_action_as_dict()["action_type"] == MorabarabaActionType.ADD :
            action_choice=ADD(board,self.position,actions)
            if action_choice != False :
                 return action_choice
            action_choice=more_occasion(state,-1*self.position,actions)
            if action_choice != False :
                return action_choice
            action_choice=ADD(board,-1*self.position,actions)
            if action_choice != False :
                return action_choice
            return Make_occasion(rules,state,self.position,actions)
        elif actions[0].get_action_as_dict()["action_type"] == MorabarabaActionType.STEAL  : 
            action_choice=STEAL(rules,state,-1*self.position,actions)
            if action_choice != False :
                return action_choice
            return MorabarabaRules.random_play(state, self.position)
        elif actions[0].get_action_as_dict()["action_type"] == MorabarabaActionType.MOVE:
            action_choice=Move(state,rules,actions,self.position,self.position)
            if action_choice != False :
                 return action_choice
            action_choice=Move(state,rules,actions,-1*self.position,self.position)
            if action_choice != False :
                return action_choice
            return Make_occasion(rules,state,self.position,actions)
        else :
            action_choice=Move(state,rules,actions,self.position,self.position)
            if action_choice != False :
                 return action_choice
            action_choice=Move(state,rules,actions,-1*self.position,self.position)
            if action_choice != False :
                return action_choice
            return Make_occasion(rules,state,self.position,actions)

def is_making_mill(board,player,cell)  :   
    player_mills = []
    pieces = board.get_player_pieces_on_board(Color(player))
    mills = board.mills()
    for mill in mills:
        if cell in mill: 
            is_mill = True
            for mill_cell in mill:
                if mill_cell not in pieces and mill_cell != cell : is_mill =  False   
            if is_mill == True: 
                 player_mills.append(mill)

    if len(player_mills) == 0: is_player_mill = False 
    else : is_player_mill = True 
    return [ is_player_mill , player_mills ]

def is_effective_making_mill(state,player,rules,cell,mill) :
    actions=rules.get_player_actions(state,player)
    is_mill=False
    for action in actions :
        if action.get_action_as_dict()['action']['to'] == cell and action.get_action_as_dict()['action']['at'] not in mill and is_mill == False:
            is_mill=True
    return is_mill

def can_make_mill(state,rules,player) :
    for cell in state.get_board().get_all_empty_cells() :
        mills=is_making_mill(state.get_board(),player,cell)
        if  mills[0] == True:
            for mill in mills[1] :
                if is_effective_making_mill(state,player,rules,cell,mill) == True :
                    return True
    return False

def ADD(board,player,actions) :
    k=-1
    for cell in board.get_all_empty_cells() :
        k+=1
        if is_making_mill(board,player,cell)[0]==True :
             return actions[k] 
    return False

def STEAL(rules,state,player,actions) :
    board=state.get_board()
    if state.get_latest_move()['action_type'] ==  "ADD" :
        choice=""
        in_between_more_my_piece,in_between_my_piece,in_double_occasion=In_between_my_piece(board,player)
        potential_fatal_cell,fatal_cells=Fatal_cells(board,player)
        adverse_potential_occasion,adverse_occasions=Occasion(state,player)
        if len(in_between_my_piece) == 0 and len(fatal_cells) == 0 and len(adverse_occasions) !=0 :
            choice=Cell(board,player,adverse_potential_occasion[1])
        elif len(in_between_my_piece) == 0 and len(fatal_cells) !=0 :
            choice=potential_fatal_cell[1]
        elif len(in_between_my_piece) !=0 and len(fatal_cells) == 0 :
            if len(adverse_occasions) == 0 and in_double_occasion[0] == True:
                choice=in_double_occasion[1][0]
            else :
                choice=in_between_more_my_piece[1]
        elif len(in_between_my_piece) !=0 and len(fatal_cells) !=0 and potential_fatal_cell[1] in in_between_my_piece :
            choice=potential_fatal_cell[1]
        elif len(in_between_my_piece) !=0 and len(fatal_cells) !=0 and potential_fatal_cell[1] not in in_between_my_piece :
            intersection=[x for x in in_between_my_piece if x in fatal_cells]
            if len(intersection) !=0 :
                choice=intersection[0]
            else :
                choice=in_between_more_my_piece[1]
        else :
            choice=(6,0)
        for action in actions :
            if action.get_action_as_dict()['action']['at'] == choice :
                return action

    else :
        for cell in board.get_all_empty_cells() :
            mills=is_making_mill(board,player,cell) 
            if mills[0]==True :
                for mill_cell in mills[1][0] :
                    if mill_cell != cell :
                        for action in actions :
                            if action.get_action_as_dict()['action']['at'] == mill_cell :
                                return action
    return False 

def Move(state,rules,actions,player_current,player) :
   board=state.get_board()
   if player == player_current :
        for cell in board.get_all_empty_cells() :
            mills=is_making_mill(board,player_current,cell) 
            if mills[0]==True :
                for mill in mills[1] :
                    for action in actions :
                        if action.get_action_as_dict()['action']['to'] == cell and action.get_action_as_dict()['action']['at'] not in mill:
                            return action
   else :
        for cell in board.get_all_empty_cells() :
            mills=is_making_mill(board,player_current,cell) 
            if mills[0]==True :
                for mill in mills[1] :
                    for action in actions :
                        if action.get_action_as_dict()['action']['to'] == cell and action.get_action_as_dict()['action']['at'] not in mill  and is_effective_making_mill(state,player_current,rules,cell,mill) == True :
                            return action
   return False

def Cell(board,player,cell) :
    is_cell=True
    mills=[mill for mill in board.mills() if cell in mill]
    for mill in mills :
        for mill_cell in mill :
            if mill_cell in board.get_player_pieces_on_board(Color(player)) :
                cell=mill_cell
            if mill_cell in board.get_player_pieces_on_board(Color(-1*player)) :
                is_cell=False
        if is_cell == True :
            return cell

def Fatal_cells(board,player) :
    fatal_cells=[]
    potential_fatal_cell=[0,(0,0)]
    for cell in board.get_all_empty_cells() :
        mills=is_making_mill(board,player,cell)
        if mills[0] == True :
            for mill in mills[1] :
                for mill_cell in mill :
                    if mill_cell != cell :
                        fatal_cells.append(mill_cell)
    for fatal_cell in fatal_cells :
        if fatal_cells.count(fatal_cell) > potential_fatal_cell[0] :
            potential_fatal_cell=[fatal_cells.count(fatal_cell),fatal_cell]
    return potential_fatal_cell,fatal_cells

def In_between_my_piece(board,player) :
    mills=board.mills()
    in_between_my_piece=[]
    in_double_occasion=[False,[]]
    in_between_more_my_piece=[0,(0,0)]
    pieces = board.get_player_pieces_on_board(Color(-1*player))
    pieces_adverses = board.get_player_pieces_on_board(Color(player))
    for mill in mills :
        empty_cell=0
        my_color=[]
        not_my_color=[]
        for mill_cell in mill :
            if mill_cell in pieces :
                my_color.append(mill_cell)
            elif mill_cell in pieces_adverses :
                not_my_color.append(mill_cell)
            else :
                empty_cell+=1
        if empty_cell == 0 and len(my_color) == 2 :
            in_between_my_piece.append(not_my_color[0])
        if empty_cell == 1 and len(my_color) == 1 :
            if not_my_color[0] in in_double_occasion[1] :
                in_double_occasion[0]=True
            in_double_occasion[1].append(not_my_color[0])

    for cell in in_between_my_piece :
        if in_between_my_piece.count(cell) > in_between_more_my_piece[0] :
            in_between_more_my_piece=[in_between_my_piece.count(cell),cell]
  
    return in_between_more_my_piece,in_between_my_piece,in_double_occasion
            

def more_occasion(state,player,actions) :
    adverse_potential_occasion,adverse_occasions=Occasion(state,player)
    my_potential_occasion,my_occasions=Occasion(state,player)
    if adverse_potential_occasion[0] > 2 and my_potential_occasion[0] < 2 :
        for action in actions :
            if action.get_action_as_dict()['action']['to'] == adverse_potential_occasion[1]  :
                    return action
    return False

def Occasion(state,player) :
    occasions=[]
    board=state.get_board()
    mills = board.mills()
    pieces = board.get_player_pieces_on_board(Color(player))
    pieces_adverses = board.get_player_pieces_on_board(Color(-1*player))
    if len(pieces) == 0 :
        return [0,[]] , []
    else :
        for piece in pieces :
            for mill in mills :
                luck=True
                if piece in mill :
                    for mill_cell in mill :
                        if mill_cell in pieces_adverses :
                            luck=False
                    if luck == True :
                        for mill_cell in mill :
                            if mill_cell != piece and mill_cell in board.get_all_empty_cells() :
                                occasions.append(mill_cell)
        luck=[0,(0,0)]
        if len(occasions) == 0 :
            return [0,[]] , []
        else :
            for occasion in occasions :
                if occasions.count(occasion) > luck[0] :
                    luck=[occasions.count(occasion),occasion]
            return luck,occasions

def get_action(cell,player,state) :
    rules=MorabarabaRules(player)
    actions=rules.get_player_actions(state,player)
    for action in actions :
        if action.get_action_as_dict()['action']['at'] == cell  :
            return action.get_action_as_dict()['action']['to']
    return False

def are_same_color(state,mill,player,cell) :
    board=state.get_board()
    pieces=board.get_player_pieces_on_board(Color(player))
    pieces_adverses = board.get_player_pieces_on_board(Color(-1*player))
    adverse_mills=board.player_mills(-1*player)
    empty_cells=0
    index_empty_cell=0
    my_color=[]
    not_my_color=[]
    luck=[False,[]]
    for mill_cell in mill :
        if mill_cell in pieces :
            my_color.append(mill_cell)
        elif mill_cell in pieces_adverses :
            not_my_color.append(mill_cell)
        else :
            empty_cells+=1
            index_empty_cell=mill.index(mill_cell)
    if empty_cells == 2 :
        luck=[True,[cell]]
    elif empty_cells == 1 :
        if len(my_color) == 2 and index_empty_cell == 1 :
            luck=[True,[cell]]
        elif len(my_color) == 2 and index_empty_cell != 1 :
            my_color=[x for x in my_color if x!=cell]
            my_color.insert(0,cell)
            luck=[True,my_color]
        elif len(my_color) == 1 and index_empty_cell == 1 :
            luck=[True,[cell]]
        else :
            x,occasions=Occasion(state,player)
            cell=get_action(my_color[0],player,state)
            if cell in occasions :
                luck=[True,[cell]]
            else :
                luck=[False,[]]
    else :
        if len(my_color) == 3 :
            luck=[True,my_color]
        else :
            x,occasions=Occasion(state,player)
            cell=get_action(my_color[0],player,state)
            if cell in occasions and luck[0] == False:
                luck=[True,[cell]]
            else :
                luck=[False,[]]
    return luck
        
def random_play(actions):
    import random
    if len(actions) == 0:
        choice = False
    else:
        choice=random.choice(actions)
    return choice 

def Make_occasion(rules,state,player,actions) :
    board=state.get_board()
    if actions[0].get_action_as_dict()["action_type"] == MorabarabaActionType.ADD :
        pieces=board.get_player_pieces_on_board(Color(player))
        my_potential_occasion,my_occasions=Occasion(state,player)
        adverse_potential_occasion,adverse_occasions=Occasion(state,-1*player)
        choice=""
        if len(my_occasions) == 0 and len(adverse_occasions) == 0:
            choice=[(5,1),(0,1)]
        elif len(my_occasions) == 0 and len(adverse_occasions) != 0 :
            choice=[adverse_potential_occasion[1]]
        else :
            if my_potential_occasion[0] >= adverse_potential_occasion[0] and my_potential_occasion[0] != 1 :
                choice=[my_potential_occasion[1]]
            elif adverse_potential_occasion[1] in my_occasions and adverse_potential_occasion[0] !=1 :
                choice=[adverse_potential_occasion[1]]
            elif adverse_potential_occasion[0] > my_potential_occasion[0] :
                choice=[adverse_potential_occasion[1]]
            else :
                choice=[cell for cell in my_occasions if cell in adverse_occasions]
                if len(choice) == 0 :
                    choice=[my_occasions[0]]
        for cell in choice :
            for action in actions :
                if action.get_action_as_dict()['action']['to'] == cell  :
                        return action
        return MorabarabaRules.random_play(state,player)
               
    elif actions[0].get_action_as_dict()["action_type"] == MorabarabaActionType.MOVE :
        pieces=board.get_player_pieces_on_board(Color(player))
        player_mills=board.player_mills(player)
        mills=board.mills()
        dont_move_cell=[]
        if can_make_mill(state,rules,player*-1) == False :
            for player_mill in player_mills :
                for mill_cell in player_mill :
                    new_mills=[mill for mill in mills if mill_cell in mill and mill != player_mill ]
                    proba=[True,[]]
                    for mill in new_mills :
                        luck=are_same_color(state,mill,player,mill_cell)
                        proba[0]=proba[0] and luck[0]
                        for x in luck[1] :
                            proba[1].append(x)
                    print(proba[1])
                    if proba[0] == True :
                            for cell in proba[1] :
                                print(cell)
                                for action in actions :
                                    if action.get_action_as_dict()['action']['at'] == cell  :
                                        return action
                    else :
                        dont_move_cell.append(mill_cell)

            if len(dont_move_cell) !=0 :
                new_actions=[new_action for new_action in actions if new_action.get_action_as_dict()["action"]['at'] not in dont_move_cell]
                action_choice=random_play(new_actions)
                if  action_choice != False :
                     return action_choice

            return MorabarabaRules.random_play(state,player)
        else :
            for mill in player_mills :
                for mill_cell in mill :
                    dont_move_cell.append(mill_cell)

            if len(dont_move_cell) !=0 :
                new_actions=[new_action for new_action in actions if new_action.get_action_as_dict()["action"]['at'] not in dont_move_cell]
                action_choice=random_play(new_actions)
                if  action_choice != False :
                     return action_choice
            print("\n random")
            return MorabarabaRules.random_play(state,player)

        return MorabarabaRules.random_play(state,player)
    else :
        return MorabarabaRules.random_play(state,player)

